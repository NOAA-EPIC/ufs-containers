#change the FROM line to build using a different version of spack-stack
#note that every instance of spack-stack-1.6.0 will need to be changed below as well
FROM noaaepic/ubuntu22.04-intel-unified:v1.6.0-fms202401

WORKDIR /opt
#clone the jedi bundle and checkout the appropriate release
RUN git clone -b release/skylab-v7 https://github.com/JCSDA/jedi-bundle.git && mkdir jedi-bundle/build
RUN cd /opt/spack-stack && rm -rf spack/var/spack/cache
WORKDIR /opt/jedi-bundle
#delete a few unnecessary packages
#RUN sed -i '/soca/d' CMakeLists.txt && sed -i '/gsw/d' CMakeLists.txt && sed -i '/mom6/d' CMakeLists.txt && \
#the .bashenv file activates lmod and loads the intel and intelmpi modules
#load up the modules needed for skylab build, configure and build
##    module load zlib openblas hdf5 nccmp libpng eigen netcdf-c parallel-netcdf udunits eckit netcdf-fortran parallelio ecbuild fckit gsl-lite fms/release-jcsda jasper atlas nco crtm/v2.4.1-jedi jedi-cmake && \
RUN source /opt/spack-stack/spack-stack-1.6.0/.bashenv && \
    module load ewok-env soca-env fms/release-jcsda && \
    cd build && ecbuild -DCMAKE_INSTALL_PREFIX=../install .. && \
    make -j 4 && make install 
RUN rm -rf /opt/jedi-bundle/build
WORKDIR /opt
#clone and build the land-DA workflow
RUN git clone -b develop --recursive https://github.com/ufs-community/land-DA_workflow.git
#RUN git clone -b ss160-container-update --recursive https://github.com/EdwardSnyder-NOAA/land-DA_workflow.git
COPY build_singularity_intel.lua /opt/land-DA_workflow/modulefiles
RUN chmod a+rx /opt/land-DA_workflow/modulefiles/build_singularity_intel.lua
RUN sed -i -e $'$a\\\n  - numpy=2.1.1' $PWD/land-DA_workflow/parm/conda_environment.yml && sed -i -e $'$a\\\n  - matplotlib=3.9.2' $PWD/land-DA_workflow/parm/conda_environment.yml
RUN sed -i -e $'$a\\\n  - scipy=1.14.1' $PWD/land-DA_workflow/parm/conda_environment.yml && sed -i -e $'$a\\\n  - cartopy=0.23.0' $PWD/land-DA_workflow/parm/conda_environment.yml
RUN sed -i -e $'$a\\\n  - xarray=2024.9.0' $PWD/land-DA_workflow/parm/conda_environment.yml && sed -i -e $'$a\\\n  - netcdf4=1.7.1' $PWD/land-DA_workflow/parm/conda_environment.yml
RUN  source /opt/spack-stack/spack-stack-1.6.0/envs/fms-2024.01/.bashenv-fms  && \
    # module load bacio cmake crtm ecbuild esmf fms gftl-shared g2 g2tmpl hdf5 ip jasper libpng mapl netcdf-c netcdf-fortran parallelio && \
     #module load prod_util py-cartopy py-matplotlib py-netcdf4 py-numpy py-pyyaml py-scipy py-xarray sp ufs-pyenv w3emc zlib scotch && \
     #module load prod_util py-netcdf4 py-numpy py-pyyaml py-xarray sp ufs-pyenv w3emc zlib scotch && \
     cd land-DA_workflow/sorc && \
     export os=$(uname) && \
     export hardware=$(uname -m) && \
     export installer=Miniforge3-${os}-${hardware}.sh && \
     curl -L -O "https://github.com/conda-forge/miniforge/releases/download/23.3.1-1/${installer}" && \
     bash ./${installer} -bfp conda && \ 
     rm ${installer} && \
     source conda/etc/profile.d/conda.sh && \ 
     conda activate && mamba env create -n land_da --file /opt/land-DA_workflow/parm/conda_environment.yml && \
     cd .. && \
     module use /opt/land-DA_workflow/modulefiles && \
     module load build_singularity_intel && \
     mkdir build && cd build && \
     ecbuild -DCMAKE_INSTALL_PREFIX=../install ../sorc && make VERBOSE=1 -j 8 install && \
     cp ufs_model.fd/src/ufs_model.fd-build/ufs_model ../install/bin/ && \
     #cd .. && rm -rf build && mkdir -p sorc/build/bin && mkdir exec
     cd .. && mkdir exec
# Not sure the next lines are needed
#     cd sorc/DA_update/jedi/fv3-jedi/Data/ && rm f* && \
#     cp -r /opt/jedi-bundle/fv3-jedi/test/Data/fieldmetadata . && cp -r /opt/jedi-bundle/fv3-jedi/test/Data/fv3files . 
COPY run_container_executable.sh /opt/land-DA_workflow/parm
COPY build_container_executable.sh /opt/land-DA_workflow/parm
COPY setup_container.sh /opt/land-DA_workflow
WORKDIR /opt/land-DA_workflow
#RUN mkdir -p singularity/bin && cd singularity/bin && \
#    ln -s ../../run_container_executable.sh apply_incr.exe && \
#    ln -s ../../run_container_executable.sh tile2tile_converter.exe && \
#    ln -s ../../run_container_executable.sh ufs_model && \
#    ln -s ../../run_container_executable.sh python && \
    #ln -s ../../run_container_executable.sh fv3jedi_letkf.x && \
#    ln -s ../../build_container_executable.sh ecbuild && \
#    ln -s ../../build_container_executable.sh make && \
#    ln -s ../../build_container_executable.sh cmake && \
#    ln -s ../../build_container_executable.sh ctest && \
#    cd ../../sorc/build/bin && \
#    ln -s ../../../run_container_executable.sh apply_incr.exe && \
#    ln -s ../../../run_container_executable.sh tile2tile_converter.exe && \
    #ln -s ../../../run_container_executable.sh fv3jedi_letkf.x && \
 #   ln -s ../../../run_container_executable.sh python && \
 #   ln -s ../../../run_container_executable.sh ufs_model && \
RUN mkdir -p singularity/bin && \
    mkdir -p /work && \
    mkdir -p /work2 && \
    mkdir -p /contrib && \
    mkdir -p /lustre  && \
    mkdir -p /scratch1 && \
    mkdir -p /scratch2 && \
    mkdir -p /glade && \
    mkdir -p /data && \
    mkdir -p /scratch && \
    mkdir -p /lfs && \
    mkdir -p /u && \
    mkdir -p /discover && \
    mkdir -p /mnt && \
    mkdir -p /lfs1 && \
    mkdir -p /lfs2 && \
    mkdir -p /lfs3 && \
    mkdir -p /lfs4 && \
    mkdir -p /export && \
    mkdir -p /Users && \
    mkdir -p /ncrc && \
    #chmod a+rx ../run_container_executable.sh ../build_container_executable.sh ../setup_container.sh
    chmod a+rx setup_container.sh parm/build_container_executable.sh parm/run_container_executable.sh
    #pip install numpy && pip install matplotlib &&  pip install argparse && pip install pyyaml && \
    #pip install f90nml netcdf4
#ENV PYTHONPATH=/opt/ioda-bundle/build/lib/pyiodaconv:/opt/ioda-bundle/build/lib/python3.8/pyioda
#uncomment the following to put some sample data into the container. This allows for simple testing on basically any platform
#RUN mkdir /opt/landda-data
#ADD landda-test-comps.tar.gz /opt/landda-data
#ADD landda-test-inps.tar.gz /opt/landda-data
#Uncomment to pull in last minute changes to scripts, modulefiles, etc. (not source code) without having to rebuild everything
#RUN cd /opt/land-DA_workflow && git remote update && git pull origin release/public-v1.0.0
