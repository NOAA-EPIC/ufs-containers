FROM noaaepic/ubuntu20.04-base-intel-2021.3:unified-dev-v1.4.0
WORKDIR  /opt/spack-stack/spack-stack-1.4.0

# set the spack directories to be safe for use by git even though they are in /opt
RUN git config --global --add safe.directory /opt/spack-stack/spack-stack-1.4.0
RUN git config --global --add safe.directory /opt/spack-stack/spack-stack-1.4.0/spack

# Get any recent updates to the release
RUN git remote update && git checkout release/1.4.0 && git pull origin release/1.4.0
RUN git submodule sync && git submodule update 


#Copy in the ubuntu-intel configuration files
ADD ubuntu-intel-21.3.tar.gz /opt/spack-stack/spack-stack-1.4.0/configs/sites

# Create the environment
RUN . ./setup.sh && spack compiler rm gcc@9.4.0 && spack stack create env --site ubuntu-intel --template unified-dev --name unified-dev && \
    spack compiler list

# Concretize 
RUN . ./setup.sh && spack env activate envs/unified-dev && \ 
    spack concretize  && mkdir /usr/bin/info && \
    echo "done"

# Set up the public and private keys for the binary cache
COPY unified.pub /opt/spack-stack/spack-stack-1.4.0
COPY unified.private /opt/spack-stack/spack-stack-1.4.0

# Either copy in the spack-mirror or pull it from s3
ADD spack-mirror.tar.gz /opt
#RUN wget https://epic-sandbox-srw.s3.amazonaws.com/spack-mirror.tar.gz && tar xvfz spack-mirror.tar.gz && rm spack-mirror.tar.gz

# Add the new mirror and install the unified environment
RUN ls -l /opt/spack-stack/spack-stack-1.4.0/envs/unified-dev && source ./setup.sh && spack env activate envs/unified-dev && \
     spack mirror add unified file:/opt/spack-mirror && spack gpg trust unified.pub && spack gpg trust unified.private && \
     spack install  --no-check-signature --no-checksum |& tee install.log ; exit 0


ENV SHELL=/bin/bash
# refresh the modulefiles and create meta-modules
RUN  . ./setup.sh && source /usr/share/lmod/lmod/init/bash && spack env activate envs/unified-dev && spack module lmod refresh -y && \
     spack stack setup-meta-modules && \
     module use /opt/spack-stack/spack-stack-1.4.0/envs/unified-dev/install/modulefiles/Core && \
     module avail && \
#    sed -i 's/impi/intel-oneapi-mpi/g' /opt/spack-stack/spack-stack-1.4.0/envs/unified-dev/install/modulefiles/intel/*/stack-intel-oneapi-mpi/*.lua && \
# There are some issues with depends_on that require those command to be commented out
     find /opt/spack-stack/spack-stack-1.4.0/envs/unified-dev/install/modulefiles -iname "*.lua" | xargs grep -l depends_on | xargs sed -i 's/depends_on/-- depends_on/g' && \
     echo "module use /opt/spack-stack/spack-stack-1.4.0/envs/unified-dev/install/modulefiles/Core" >> /root/.bashenv && \
     echo "module load stack-intel stack-intel-oneapi-mpi" >> /root/.bashenv && \
     source /root/.bashenv && \
     echo "[[ -s ~/.bashenv ]] && source ~/.bashenv" >> /root/.bash_profile && \
     echo "[[ -s ~/.bashenv ]] && source ~/.bashenv" >> /root/.bashrc && \
     cp ~/.bashenv /opt/spack-stack/spack-stack-1.4.0 && \
     echo "DONE2" 
WORKDIR /opt/spack-stack/spack-stack-1.4.0

#RUN source ./setup.sh && spack env activate envs/unified-dev && \
#    head -n 5 ./.bashenv > bashenv && mv ./bashenv ./.bashenv && source ./.bashenv && \
#    spack module lmod refresh -y && sed -i 's/,/ /g' .bashenv && \
#    find /opt/spack-stack/spack-stack-1.4.0/envs/unified-dev/install/modulefiles -iname "*.lua" | xargs grep -l depends_on | xargs sed -i 's/depends_on/-- depends_on/g' 

RUN source /root/.bashenv && module list && \
    module load ecbuild fckit gsl-lite/0.37.0 jasper/2.0.32 atlas && \
    module load libjpeg/2.1.0 pkg-config/0.29.2 curl zstd/1.5.2 esmf fms bacio/2.4.1 crtm-fix/2.4.0_emc && \
    module load git-lfs/2.9.2 crtm/2.4.0 g2/3.4.5 g2tmpl/1.10.2 ip/3.3.3 sp/2.3.3 w3emc/2.9.2 gftl gftl-shared/1.5.0 && \
    module load yafyaml/0.5.1 mapl netcdf-c netcdf-fortran parallelio && \
    module load zlib libpng hdf5 && \
    export PATH=$PATH:/opt/jedi-bundle/build/bin:/opt/land-DA_workflow/singularity/bin && \
    export LD_LIBRARY_PATH=/opt/land-DA_workflow/build/lib:$LD_LIBRARY_PATH && \
    echo "ENV PATH=$PATH" > landda.envs && \
    echo "ENV LD_LIBRARY_PATH=$LD_LIBRARY_PATH" >> landda.envs && \
    echo "ENV LIBRARY_PATH=$LIBRARY_PATH" >> landda.envs && \
    echo "ENV MODULEPATH=$MODULEPATH" >> landda.envs && \
    echo "ENV FI_PROVIDER_PATH=$FI_PROVIDER_PATH" >> landda.envs && \
    echo "ENV CMAKE_PREFIX_PATH=$CMAKE_PREFIX_PATH" >> landda.envs && \
    echo ENV CC=`which mpiicc` >> landda.envs && \
    echo ENV FC=`which mpiifort` >> landda.envs && \
    echo ENV CXX=`which mpiicpc` >> landda.envs && \
    module purge && source /root/.bashenv && \
    module load jasper/2.0.32 netcdf-fortran/4.6.0 bacio/2.4.1 ip/3.3.3 yafyaml/0.5.1 sigio/2.3.2 wgrib2/2.0.8 zlib/1.2.13 && \
    module load parallelio/2.5.9 crtm/2.4.0 sp/2.3.3 mapl w3nco/2.4.1 libpng/1.6.37 esmf g2/3.4.5 libjpeg/2.1.0 && \
    module load w3emc/2.9.2 nemsio/2.5.2 wrf-io/1.2.0 netcdf-c/4.9.2 bufr/11.7.1 g2tmpl/1.10.2 gftl-shared sfcio/1.4.1 ncio/1.1.2 &&\
    echo "ENV PATH=$PATH" > srw.envs && \
    echo "ENV LD_LIBRARY_PATH=$LD_LIBRARY_PATH" >> srw.envs && \
    echo "ENV LIBRARY_PATH=$LIBRARY_PATH" >> srw.envs && \
    echo "ENV MODULEPATH=$MODULEPATH" >> srw.envs && \
    echo "ENV FI_PROVIDER_PATH=$FI_PROVIDER_PATH" >> srw.envs && \
    echo "ENV CMAKE_PREFIX_PATH=$CMAKE_PREFIX_PATH" >> srw.envs && \
    echo ENV CC=`which mpiicc` >> srw.envs && \
    echo ENV FC=`which mpiifort` >> srw.envs && \
    echo ENV CXX=`which mpiicpc` >> srw.envs && \
    cp ~/.bashenv /opt/spack-stack/spack-stack-1.4.0 && \
    rm -rf /opt/spack-mirror
RUN rm -rf /opt/dist /opt/build /opt/spack-stack/spack-stack-1.4.0/cache/* /opt/spack-mirror
