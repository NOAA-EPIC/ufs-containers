From intel/ubuntu22.04-hpckit:2023.1.0

RUN mkdir -p /opt/build
RUN apt-get update &&   DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends     ca-certificates curl &&   rm -rf /var/lib/apt/lists/*
# install cmake
RUN cd /opt/build &&     curl -LO https://github.com/Kitware/CMake/releases/download/v3.23.1/cmake-3.23.1-linux-x86_64.sh && /bin/bash cmake-3.23.1-linux-x86_64.sh --prefix=/usr/local --skip-license

# update apt
RUN apt-get update -yq --allow-unauthenticated

RUN DEBIAN_FRONTEND=noninteractive TZ=Etc/UTC apt-get -y install tzdata
# Install some basics that will be needed by all apps
RUN ln -fs /usr/share/zoneinfo/America/New_York /etc/localtime && \
    dpkg-reconfigure --frontend noninteractive tzdata && \
    apt -y install build-essential git vim python3 wget libexpat1-dev bc time && \
    apt -y install -yq libtiff-dev git-lfs python3-distutils python3-pip wget m4 unzip 
RUN apt -y install bison flex && \
    apt -y install texinfo libmysqlclient-dev freetype2-demos libbz2-dev && \
    apt -y install --no-install-recommends apt-utils && \
    apt install tcl-dev rsync -y && \
    apt -y install texinfo libmysqlclient-dev freetype2-demos libbz2-dev libbz2-dev
RUN echo "dash dash/sh boolean false" | debconf-set-selections

# the dash shell breaks everything. Replace it with bash as default /bin/sh
RUN DEBIAN_FRONTEND=noninteractive dpkg-reconfigure dash

# Prepare spack-stack just like it is built on RDHPCS platforms under the spack-stack umbrella
RUN mkdir -p /opt/spack-stack
WORKDIR /opt/spack-stack

# This clone version will change for each successive release
RUN git clone -b release/1.5.1 --recursive https://github.com/jcsda/spack-stack.git spack-stack-1.5.1
WORKDIR /opt/spack-stack/spack-stack-1.5.1

# Install the intel-oneapi compilers using spack and add them to the spack compiler list
#RUN . ./setup.sh && spack install intel-oneapi-compilers@2021.3.0 && \
#    spack install intel-oneapi-mpi@2021.3.0 && \
## add the new compilers to spack's compiler list
#    spack compiler add `spack location -i intel-oneapi-compilers`/compiler/latest/linux/bin/intel64 
ENV PATH="${PATH}:/usr/local:/opt/intel/oneapi/compiler/2023.2.3/linux/bin/intel64"

#this module.yaml file sets the format for tcl modules built by spack to have no extra hashes
COPY modules.yaml spack/etc/spack/defaults

# Find some of the spack externals, then install any general packages (cmake) that don't need to be 
#part of the concretization
RUN . ./setup.sh && \
    spack compiler add && \
    spack external find wget && \
    spack external find m4 && \
    spack external find git && \
    spack external find curl && \
    spack external find git-lfs && \
    spack external find openssl && \
    spack external find libjpeg-turbo && \
    spack external find perl && \
    spack external find python && \
    spack external find cmake && \
# generate the tcl modules for the compilers and mpi
    spack module tcl refresh -y --delete-tree

# some packages can't find libpython in x86_64, so link them in /usr/lib
RUN ln -s /usr/lib/x86_64-linux-gnu/libpython3.10.a /usr/lib && ln -s /usr/lib/x86_64-linux-gnu/libpython3.10.so /usr/lib
WORKDIR /opt
RUN wget https://sourceforge.net/projects/lmod/files/lua-5.1.4.9.tar.bz2 && tar xvfj lua-5.1.4.9.tar.bz2 && \
    cd lua-5.1.4.9 && ./configure --prefix=/usr && make -j 4 && make install && git clone --recursive https://github.com/TACC/Lmod.git && \
    cd Lmod && ./configure --prefix=/usr && make -j 4 && make install
#set up modules to be loaded automatically when shelling into the container
WORKDIR /opt/spack-stack/spack-stack-1.5.1
#RUN . ./setup.sh && \
#    echo "source /usr/lmod/lmod/init/bash" >> /root/.bashenv && \
#    echo "module use $MODULEPATH" >> /root/.bashenv && \
#    echo "module load intel-oneapi-compilers intel-oneapi-mpi " >> /root/.bashenv && \
#    echo "[[ -s ~/.bashenv ]] && source ~/.bashenv" >> /root/.bash_profile && \
#    echo "[[ -s ~/.bashenv ]] && source ~/.bashenv" >> /root/.bashrc

# install boost from source
RUN cd /opt && wget https://boostorg.jfrog.io/artifactory/main/release/1.78.0/source/boost_1_78_0.tar.gz && \
    tar xvfz boost_1_78_0.tar.gz && cd boost_1_78_0 && ./bootstrap.sh --prefix=/usr/ --with-python=/usr/bin/python3 && ./b2 install && \
# without an actual python executable, env python fails, so link python3 to python
    ln -s /usr/bin/python3 /usr/bin/python && \
# remove build artifacts to reduce size
    cd .. && rm -rf boost* && \
    rm -rf /opt/build /opt/spack-stack/spack-stack-1.5.1/cache/* && \
    rm -rf /opt/lua* Lmod
