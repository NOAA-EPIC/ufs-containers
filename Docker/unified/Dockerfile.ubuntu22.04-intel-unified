From intel/ubuntu22.04-hpckit:2023.1.0
ARG branch_name

ENV branch=$branch_name
RUN mkdir -p /opt/build
RUN apt-get update &&   DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends     ca-certificates curl &&   rm -rf /var/lib/apt/lists/*
# install cmake
RUN cd /opt/build &&     curl -LO https://github.com/Kitware/CMake/releases/download/v3.23.1/cmake-3.23.1-linux-x86_64.sh && /bin/bash cmake-3.23.1-linux-x86_64.sh --prefix=/usr/local --skip-license
#
# update apt
RUN apt-get update -yq --allow-unauthenticated
#
RUN DEBIAN_FRONTEND=noninteractive TZ=Etc/UTC apt-get -y install tzdata
# Install some basics that will be needed by all apps
RUN ln -fs /usr/share/zoneinfo/America/New_York /etc/localtime && \
    dpkg-reconfigure --frontend noninteractive tzdata && \
apt install -y --no-install-recommends  vim && \ 
apt install -y --no-install-recommends  wget && \
apt install -y --no-install-recommends  libexpat1-dev&& \
apt install -y --no-install-recommends  bc && \
apt install -y --no-install-recommends  time && \
apt install -y --no-install-recommends  libtiff-dev && \
apt install -y --no-install-recommends  bison && \
apt install -y --no-install-recommends  flex && \
apt install -y --no-install-recommends  libbz2-dev && \
apt install -y --no-install-recommends  apt-utils && \
apt install -y --no-install-recommends  tcl-dev && \
apt install -y --no-install-recommends  rsync && \
apt install -y --no-install-recommends  texinfo && \
apt install -y --no-install-recommends  libbz2-dev && \
apt install -y --no-install-recommends  awscli && \
#
#RUN apt install -y --no-install-recommends  environment-modules && \
apt install -y --no-install-recommends  build-essential && \
apt install -y --no-install-recommends  m4 && \
apt install -y --no-install-recommends  git && \
apt install -y --no-install-recommends  git-lfs && \
apt install -y --no-install-recommends  bzip2 && \
apt install -y --no-install-recommends  unzip && \
apt install -y --no-install-recommends  automake && \
apt install -y --no-install-recommends  autoconf && \
apt install -y --no-install-recommends  xterm && \
apt install -y --no-install-recommends  libcurl4-openssl-dev && \
apt install -y --no-install-recommends  libssl-dev && \
apt install -y --no-install-recommends  meson && \
apt install -y --no-install-recommends  mysql-server && \
apt install -y --no-install-recommends  libmysqlclient-dev && \
apt install -y --no-install-recommends  file && \
apt install -y --no-install-recommends  python3-dev python3-pip && \
rm -rf /var/lib/apt/lists/* 
#
ENV PATH="${PATH}:/usr/local:/opt/intel/oneapi/compiler/2023.2.3/linux/bin/intel64"
#
RUN echo "dash dash/sh boolean false" | debconf-set-selections && \
# the dash shell breaks everything. Replace it with bash as default /bin/sh
    DEBIAN_FRONTEND=noninteractive dpkg-reconfigure dash && \
# some packages can't find libpython in x86_64, so link them in /usr/lib
    ln -s /usr/lib/x86_64-linux-gnu/libpython3.10.a /usr/lib && ln -s /usr/lib/x86_64-linux-gnu/libpython3.10.so /usr/lib && \
    cd opt && \
# Install lua and lmod from source
    wget https://sourceforge.net/projects/lmod/files/lua-5.1.4.9.tar.bz2 && tar xvfj lua-5.1.4.9.tar.bz2 && \
    cd lua-5.1.4.9 && ./configure --prefix=/usr && make -j 4 && make install && git clone --recursive https://github.com/TACC/Lmod.git && \
    cd Lmod && ./configure --prefix=/usr && make -j 4 && make install && \  
# spack scipy install is broken, so install on the system
    pip install scipy && pip install cython && \
# install boost from source
    cd /opt && wget https://boostorg.jfrog.io/artifactory/main/release/1.78.0/source/boost_1_78_0.tar.gz && \
    tar xvfz boost_1_78_0.tar.gz && cd boost_1_78_0 && ./bootstrap.sh --prefix=/usr/ --with-python=/usr/bin/python3 && ./b2 install ; \
# without an actual python executable, env python fails, so link python3 to python
    ln -s /usr/bin/python3 /usr/bin/python && \
# remove build artifacts to reduce size
    cd .. && rm -rf boost* && \
    rm -rf /opt/build /opt/spack-stack/spack-stack-$branch/cache/* && \
    rm -rf /opt/lua* Lmod
#
# Prepare spack-stack just like it is built on RDHPCS platforms under the spack-stack umbrella
RUN mkdir -p /opt/spack-stack
WORKDIR /opt/spack-stack
#
#Copy in the ubuntu-intel configuration files
ADD ubuntu-intel-21.3.tar.gz /opt/spack-stack 
ADD spack-mirror-1.7.0.tar.gz /opt
## Either copy in the spack-mirror or pull it from s3
#ADD spack-mirror.tar.gz /opt
##RUN wget https://epic-sandbox-srw.s3.amazonaws.com/spack-mirror.tar.gz && tar xvfz spack-mirror.tar.gz && rm spack-mirror.tar.gz
#
# This clone version will change for each successive release
RUN git clone -b release/$branch --recursive https://github.com/jcsda/spack-stack.git spack-stack-$branch && \
  cd /opt/spack-stack/spack-stack-$branch && \
# set the spack directories to be safe for use by git even though they are in /opt
    git config --global --add safe.directory /opt/spack-stack/spack-stack-$branch && \
    git config --global --add safe.directory /opt/spack-stack/spack-stack-$branch/spack && \
#
# Get any recent updates to the release
    git remote update && git checkout release/$branch && git pull origin release/$branch && \
    git submodule sync && git submodule update  && \
    mv /opt/spack-stack/ubuntu-intel configs/sites && \ 
#
# Create the environment
    . ./setup.sh && spack compiler rm gcc@11.4.0 && \
    export SPACK_SYSTEM_CONFIG_PATH="$PWD/env/unified-env/site" && spack stack create env --site ubuntu-intel --template unified-dev --name unified-env && \
    spack compiler add oneapi && spack compiler list && sed -i "s/'%aocc', '%apple-clang', '%gcc', //g" /opt/spack-stack/spack-stack-$branch/envs/unified-env/spack.yaml && \
    sed -i 's/\=2021/2021/g' /root/.spack/linux/compilers.yaml && \
#
# Concretize 
    . ./setup.sh && spack env activate envs/unified-env && \ 
    unset SPACK_SYSTEM_CONFIG_PATH && \ 
    spack config add "packages:fontconfig:variants:+pic" && \
    spack config add "packages:pixman:variants:+pic" && \
    spack config add "packages:cairo:variants:+pic" && \
    sed -i '/awscli/d' /opt/spack-stack/spack-stack-1.7.0/spack-ext/repos/spack-stack/packages/ewok-env/package.py && \
    spack concretize  && mkdir /usr/bin/info && \
    spack mirror add unified file:/opt/spack-mirror && spack install --use-cache --no-check-signature --no-checksum |& tee install.log ; exit 0 && \
    rm -rf /opt/dist /opt/build /opt/spack-stack/spack-stack-$branch/cache/* /opt/spack-mirror && \
    echo "DONE"
WORKDIR /opt/spack-stack/spack-stack-$branch
COPY packages.yaml /opt/spack-stack/spack-stack-$branch/envs/unified-env/site/packages.yaml
RUN . ./setup.sh && spack env activate envs/unified-env && sed -i '/intel-oneapi-mpi/d' envs/unified-env/common/modules.yaml && \
     source /usr/lmod/lmod/init/bash && \
     spack module lmod refresh -y && rm -rf ~/.spack && \
     spack stack setup-meta-modules && \
     module use /opt/spack-stack/spack-stack-$branch/envs/unified-env/install/modulefiles/Core && \
     module load stack-intel stack-intel-oneapi-mpi && module list && \
     echo "source /usr/lmod/lmod/init/bash" >> /root/.bashenv && \
     echo "module use /opt/spack-stack/spack-stack-$branch/envs/unified-env/install/modulefiles/Core" >> /root/.bashenv && \
     echo "module load stack-intel intel-oneapi-mpi" >> /root/.bashenv && \
     echo "module load stack-intel-oneapi-mpi" >> /root/.bashenv && \
     echo "module load jedi-ufs-env" >> /root/.bashenv && \
     echo "[[ -s ~/.bashenv ]] && source ~/.bashenv" >> /root/.bash_profile && \
     echo "[[ -s ~/.bashenv ]] && source ~/.bashenv" >> /root/.bashrc && \
     cp ~/.bashenv /opt/spack-stack/spack-stack-$branch && \
     sed -i '/MODULEPATH/a prepend_path\(\"PATH\",\"\/opt\/intel\/oneapi\/compiler\/2024.0\/bin\"\)' /opt/spack-stack/spack-stack-$branch/envs/unified-env/install/modulefiles/Core/stack-intel/2021.10.0.lua && \
     echo "DONE2" 
#ENV FI_PROVIDER_PATH=/opt/spack-stack/spack-stack-1.7.0/envs/unified-env/install/intel/2021.10.0/intel-oneapi-mpi-2021.9.0-aszwejy/mpi/2021.9.0/libfabric/lib/prov:/usr/lib64/libfabric
ENV CC=/opt/intel/oneapi/compiler/2023.2.3/linux/bin/intel64/icc
ENV CXX=/opt/intel/oneapi/compiler/2023.2.3/linux/bin/intel64/icpc
ENV FC=/opt/intel/oneapi/compiler/2024.0/bin/ifort
ENV SHELL=/bin/bash
RUN ln -s /opt/intel/oneapi/mpi/2021.11 /opt/intel/oneapi/mpi/2021.9.0
ADD container-scripts.tar.gz /opt
RUN echo "source /usr/lmod/lmod/init/bash" > /etc/bash.bashrc && \
    echo "module use /opt/spack-stack/spack-stack-$branch/envs/unified-env/install/modulefiles/Core" >> /etc/bash.bashrc && \
    echo "bind '\"\\e[A\": history-search-backward'" >> /etc/bash.bashrc && \
    echo "bind '\"\\e[B\": history-search-forward'" >> /etc/bash.bashrc && \
    echo "/bin/bash --init-file /etc/bash.bashrc" >> /bin/mybash && \
    chmod +x /bin/mybash && chmod -R a+rX /root
