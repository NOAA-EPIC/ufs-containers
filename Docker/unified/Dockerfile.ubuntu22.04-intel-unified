From intel/ubuntu22.04-hpckit:2023.1.0
ARG branch_name

ENV branch=$branch_name
RUN mkdir -p /opt/build
RUN apt-get update &&   DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends     ca-certificates curl &&   rm -rf /var/lib/apt/lists/*
# install cmake
RUN cd /opt/build &&     curl -LO https://github.com/Kitware/CMake/releases/download/v3.23.1/cmake-3.23.1-linux-x86_64.sh && /bin/bash cmake-3.23.1-linux-x86_64.sh --prefix=/usr/local --skip-license

# update apt
RUN apt-get update -yq --allow-unauthenticated

RUN DEBIAN_FRONTEND=noninteractive TZ=Etc/UTC apt-get -y install tzdata
# Install some basics that will be needed by all apps
RUN ln -fs /usr/share/zoneinfo/America/New_York /etc/localtime && \
    dpkg-reconfigure --frontend noninteractive tzdata && \
apt install -y vim && \ 
apt install -y wget && \
apt install -y libexpat1-dev&& \
apt install -y bc && \
apt install -y time && \
apt install -yq libtiff-dev && \
apt install -y bison && \
apt install -y flex && \
apt install -y freetype2-demos && \
apt install -y libbz2-dev && \
apt install -y --no-install-recommends apt-utils && \
apt install -y tcl-dev && \
apt install -y rsync && \
apt install -y texinfo && \
apt install -y libbz2-dev && \

#RUN apt install -y environment-modules && \
apt install -y build-essential && \
apt install -y libkrb5-dev && \
apt install -y m4 && \
apt install -y git && \
apt install -y git-lfs && \
apt install -y bzip2 && \
apt install -y unzip && \
apt install -y automake && \
apt install -y xterm && \
apt install -y texlive && \
apt install -y libcurl4-openssl-dev && \
apt install -y libssl-dev && \
apt install -y meson && \
apt install -y mysql-server && \
apt install -y libmysqlclient-dev && \
apt install file -y && \
apt install -y python3-dev python3-pip

RUN echo "dash dash/sh boolean false" | debconf-set-selections

# the dash shell breaks everything. Replace it with bash as default /bin/sh
RUN DEBIAN_FRONTEND=noninteractive dpkg-reconfigure dash

ENV PATH="${PATH}:/usr/local:/opt/intel/oneapi/compiler/2023.2.3/linux/bin/intel64"

# some packages can't find libpython in x86_64, so link them in /usr/lib
RUN ln -s /usr/lib/x86_64-linux-gnu/libpython3.10.a /usr/lib && ln -s /usr/lib/x86_64-linux-gnu/libpython3.10.so /usr/lib
WORKDIR /opt

# Install lua and lmod from source
RUN wget https://sourceforge.net/projects/lmod/files/lua-5.1.4.9.tar.bz2 && tar xvfj lua-5.1.4.9.tar.bz2 && \
    cd lua-5.1.4.9 && ./configure --prefix=/usr && make -j 4 && make install && git clone --recursive https://github.com/TACC/Lmod.git && \
    cd Lmod && ./configure --prefix=/usr && make -j 4 && make install

# spack scipy install is broken, so install on the system
RUN pip install scipy && pip install cython

# install boost from source
RUN cd /opt && wget https://boostorg.jfrog.io/artifactory/main/release/1.78.0/source/boost_1_78_0.tar.gz && \
    tar xvfz boost_1_78_0.tar.gz && cd boost_1_78_0 && ./bootstrap.sh --prefix=/usr/ --with-python=/usr/bin/python3 && ./b2 install && \
# without an actual python executable, env python fails, so link python3 to python
    ln -s /usr/bin/python3 /usr/bin/python && \
# remove build artifacts to reduce size
    cd .. && rm -rf boost* && \
    rm -rf /opt/build /opt/spack-stack/spack-stack-$branch/cache/* && \
    rm -rf /opt/lua* Lmod

# Prepare spack-stack just like it is built on RDHPCS platforms under the spack-stack umbrella
RUN mkdir -p /opt/spack-stack
WORKDIR /opt/spack-stack

# This clone version will change for each successive release
RUN git clone -b release/$branch --recursive https://github.com/jcsda/spack-stack.git spack-stack-$branch
WORKDIR /opt/spack-stack/spack-stack-$branch

# Find some of the spack externals, then install any general packages (cmake) that don't need to be 
#part of the concretization
#RUN . ./setup.sh && \
#    spack compiler add && \
#    spack external find wget && \
#    spack external find m4 && \
#    spack external find git && \
#    spack external find curl && \
#    spack external find git-lfs && \
#    spack external find openssl && \
#    spack external find libjpeg-turbo && \
#    spack external find perl && \
#    spack external find python && \
#    spack external find cmake && \
## generate the tcl modules for the compilers and mpi
##   spack module tcl refresh -y --delete-tree

WORKDIR  /opt/spack-stack/spack-stack-$branch

# set the spack directories to be safe for use by git even though they are in /opt
RUN git config --global --add safe.directory /opt/spack-stack/spack-stack-$branch
RUN git config --global --add safe.directory /opt/spack-stack/spack-stack-$branch/spack

# Get any recent updates to the release
RUN git remote update && git checkout release/$branch && git pull origin release/$branch
RUN git submodule sync && git submodule update 

#Copy in the ubuntu-intel configuration files
ADD ubuntu-intel-21.3.tar.gz /opt/spack-stack/spack-stack-$branch/configs/sites

# Create the environment
RUN . ./setup.sh && spack compiler rm gcc@11.4.0 && \
    export SPACK_SYSTEM_CONFIG_PATH="$PWD/env/unified-env/site" && spack stack create env --site ubuntu-intel --template unified-dev --name unified-env && \
#spack external find --scope system --exclude bison --exclude cmake  --exclude curl --exclude openssl --exclude openssh && \
#spack external find --scope system wget && \
#spack external find --scope system meson && \
#spack external find --scope system mysql && \
#spack external find --scope system texlive && \
#spack external find --scope system sed && \
    spack compiler add oneapi && spack compiler list && sed -i "s/'%aocc', '%apple-clang', '%gcc', //g" /opt/spack-stack/spack-stack-$branch/envs/unified-env/spack.yaml && \
    sed -i 's/\=2021/2021/g' /root/.spack/linux/compilers.yaml 

# Concretize 
RUN . ./setup.sh && spack env activate envs/unified-env && \ 
    unset SPACK_SYSTEM_CONFIG_PATH && \ 
    spack config add "packages:fontconfig:variants:+pic" && \
    spack config add "packages:pixman:variants:+pic" && \
    spack config add "packages:cairo:variants:+pic" && \
    spack concretize  && mkdir /usr/bin/info && \
    echo "done"

## Either copy in the spack-mirror or pull it from s3
ADD spack-mirror.tar.gz /opt
##RUN wget https://epic-sandbox-srw.s3.amazonaws.com/spack-mirror.tar.gz && tar xvfz spack-mirror.tar.gz && rm spack-mirror.tar.gz
#

#COPY ubuntu22.04.patch /opt/spack-stack/spack-stack-$branch/spack
RUN . ./setup.sh && spack env activate envs/unified-env && \
    spack mirror add unified file:/opt/spack-mirror && spack install --no-check-signature --no-checksum |& tee install.log ; exit 0

ENV SHELL=/bin/bash
# refresh the modulefiles and create meta-modules
RUN  . ./setup.sh && source /usr/lmod/lmod/init/bash && spack env activate envs/unified-env && \
     sed -i '/intel-oneapi-mpi/d' envs/unified-env/common/modules.yaml && \
     spack module lmod refresh -y && rm -rf ~/.spack && \
     spack stack setup-meta-modules && \
     module use /opt/spack-stack/spack-stack-$branch/envs/unified-env/install/modulefiles/Core && \
     module avail && \
     echo "source /usr/lmod/lmod/init/bash" >> /root/.bashenv && \
     echo "module use /opt/spack-stack/spack-stack-$branch/envs/unified-env/install/modulefiles/Core" >> /root/.bashenv && \
     echo "module load stack-intel intel-oneapi-mpi" >> /root/.bashenv && \
     echo "module load stack-intel-oneapi-mpi" >> /root/.bashenv && \
     echo "module load jedi-ufs-env" >> /root/.bashenv && \
     echo "[[ -s ~/.bashenv ]] && source ~/.bashenv" >> /root/.bash_profile && \
     echo "[[ -s ~/.bashenv ]] && source ~/.bashenv" >> /root/.bashrc && \
     cp ~/.bashenv /opt/spack-stack/spack-stack-$branch && \
     echo "DONE2" 

RUN rm -rf /opt/dist /opt/build /opt/spack-stack/spack-stack-$branch/cache/* /opt/spack-mirror
