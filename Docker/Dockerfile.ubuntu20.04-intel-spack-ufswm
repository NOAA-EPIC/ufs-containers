ARG env_name=develop

FROM noaaepic/ubuntu20.04-base-intel:$env_name
WORKDIR /opt/spack-stack

# set up the site we will use for the spack-stack build
RUN mkdir -p /opt/spack-stack/configs/sites/ubuntu-intel && \
    cp /root/.spack/linux/compilers.yaml /opt/spack-stack/configs/sites/ubuntu-intel && ls -l /opt/spack-stack/configs/sites/ubuntu-intel && \
    find /opt/spack-stack/spack/opt/spack/ -iname intel-oneapi-mpi* && \
    loc=`find /opt/spack-stack/spack/opt/spack/ -iname intel-oneapi-mpi* | head -n 1` && \
    echo $loc && \
    echo "config:" > /opt/spack-stack/configs/sites/ubuntu-intel/config.yaml && \
    echo "  build_jobs: 8" >> /opt/spack-stack/configs/sites/ubuntu-intel/config.yaml && \
    echo "modules:" > /opt/spack-stack/configs/sites/ubuntu-intel/modules.yaml && \
    echo "  default:" >> /opt/spack-stack/configs/sites/ubuntu-intel/modules.yaml && \
    echo "    enable::" >> /opt/spack-stack/configs/sites/ubuntu-intel/modules.yaml && \
    echo "    - lmod" >> /opt/spack-stack/configs/sites/ubuntu-intel/modules.yaml && \
    echo "packages:" > /opt/spack-stack/configs/sites/ubuntu-intel/packages.yaml && \
    echo "  all:" >> /opt/spack-stack/configs/sites/ubuntu-intel/packages.yaml && \
    echo "    compiler:: [intel@2021.6.0]" >> /opt/spack-stack/configs/sites/ubuntu-intel/packages.yaml && \
    echo "    providers:" >> /opt/spack-stack/configs/sites/ubuntu-intel/packages.yaml && \
    echo "      mpi:: [intel-oneapi-mpi@2021.6.0]" >> /opt/spack-stack/configs/sites/ubuntu-intel/packages.yaml && \
    echo "  mpi:" >> /opt/spack-stack/configs/sites/ubuntu-intel/packages.yaml && \
    echo "    buildable: False" >> /opt/spack-stack/configs/sites/ubuntu-intel/packages.yaml && \
    echo "  intel-oneapi-mpi:" >> /opt/spack-stack/configs/sites/ubuntu-intel/packages.yaml && \
    echo "    externals:" >> /opt/spack-stack/configs/sites/ubuntu-intel/packages.yaml && \
    echo "    - spec: intel-oneapi-mpi@2021.6.0" >> /opt/spack-stack/configs/sites/ubuntu-intel/packages.yaml && \
    echo "      modules:" >> /opt/spack-stack/configs/sites/ubuntu-intel/packages.yaml && \
    echo "      - impi/2021.6.0" >> /opt/spack-stack/configs/sites/ubuntu-intel/packages.yaml && \
    echo "      prefix: $loc" >> /opt/spack-stack/configs/sites/ubuntu-intel/packages.yaml
#This is a file that I made by hand, but matches the modules used by head of develop in the UFS-WM
COPY ufs.specs /opt/spack-stack
#set up the initial environment
ENV local_env_name=develop
RUN echo $local_env_name
RUN . ./setup.sh && spack stack create env --site ubuntu-intel --template empty --name $local_env_name && \
    sed -i 's/\[\]//g' envs/$local_env_name/spack.yaml && \
    cat ufs.specs >> envs/$local_env_name/spack.yaml && \
    spack env activate envs/$local_env_name && \ 
    spack add curl@7.49.1 && \
    spack concretize && \ 
    spack install
ENV SHELL=/bin/bash
#Set up the meta-modules
RUN . ./setup.sh && source /usr/share/lmod/lmod/init/bash && \
    spack env activate envs/$local_env_name && \ 
    spack add parallel-netcdf && spack install && \
    ln -s /usr/bin/python3 /usr/bin/python && \
    spack stack setup-meta-modules && \
#The initial version of parallelio builds with shared libs, but the WM needs static. For now, I am replacing the package
#here. TODO--figure out how to make initial specs include static libs
#   spack rm parallelio && spack add parallelio~shared && spack install && \
    spack module lmod refresh -y && \
    module use /opt/spack-stack/envs/$local_env_name/install/modulefiles/Core && \
    module avail && \
    ls -l /opt/spack-stack/envs/$local_env_name/install/modulefiles/Core && \
#Have to rename impi intel-oneapi-mpi
    sed -i 's/impi/intel-oneapi-mpi/g' /opt/spack-stack/envs/$local_env_name/install/modulefiles/intel/2021.6.0/stack-intel-oneapi-mpi/2021.6.0.lua && \
#depends_on seems to be broken, so just remove all--TODO-fix depends_on syntax
    find /opt/spack-stack/envs/$local_env_name/install/modulefiles -iname "*.lua" | xargs grep -l depends_on | xargs sed -i 's/depends_on/-- depends_on/g' && \
#build up /root/.bashenv to load ALL the modules built in this environment at login
    echo "module use /opt/spack-stack/envs/$local_env_name/install/modulefiles/Core" >> /root/.bashenv && \
    echo "module load stack-intel stack-intel-oneapi-mpi" >> /root/.bashenv && \
    source /root/.bashenv && \
    module spider >& mods && grep ": " mods | awk -F ":" '{print "module load " $2}' | grep -v intel >> /root/.bashenv && \
    echo "[[ -s ~/.bashenv ]] && source ~/.bashenv" >> /root/.bash_profile && \
    echo "[[ -s ~/.bashenv ]] && source ~/.bashenv" >> /root/.bashrc && \
    echo "DONE"
#write all the environment variables to an internal file that will be used by later containers for runtime 
RUN source /root/.bashenv && module list && echo "env PATH=/opt/ufs-weather-model/build:$PATH" > locenvs && \
    echo "ENV MODULEPATH=$MODULEPATH" >> locenvs && \
    echo "ENV FI_PROVIDER_PATH=$FI_PROVIDER_PATH" >> locenvs && \
    echo "ENV LMOD_DEFAULT_MODULEPATH=$LMOD_DEFAULT_MODULEPATH" >> locenvs && \
    echo "ENV LMOD_PKG=$LMOD_PKG" >> locenvs && \
    echo "ENV LMOD_CMD=$LMOD_CMD" >> locenvs && \
    echo "ENV LMOD_DIR=$LMOD_DIR" >> locenvs && \
    echo "ENV MODULESHOME=$MODULESHOME" >> locenvs
RUN cp /root/.bashenv /opt/spack-stack && esmf=`find /opt/spack-stack/envs/develop/install/ -name libesmf.a` && ESMF=`dirname $esmf`/libESMF.a && \
    ln -s $esmf $ESMF 
